set nocompatible               " be iMproved
filetype off                   " required!

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" My Bundles here:
Plugin 'majutsushi/tagbar'
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/syntastic'
Plugin 'kien/ctrlp.vim'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'pangloss/vim-javascript'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on     " required!

" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

syntax on                       " turns syntax highlighting on
colorscheme desert           " defines color scheme of syntax highlighting

set ruler                       " (ru) show the cursor position at all times
set showcmd                     " (sc) display an incomplete command in the lower right
set history=50                  " (hi) keep 50 lines of command history
set showmatch                   " (sm) briefly jump to matching bracket when inserting one
set autoindent                  " (ai) turn on auto-indenting (great for programers)
set copyindent                  " (ci) when auto-indenting, use the indenting format of the previous line
set tabstop=2                   " (ts) width (in spaces) that a <tab> is displayed as
set shiftwidth=2                " (sw) width (in spaces) used in each step of autoindent (aswell as << and >>)
set expandtab                   " (et) expand tabs to spaces (use :retab to redo entire file)
"set smartindent

set textwidth=0                " (tw) number of columns before an automatic line break is inserted (see formatoptions)
"set formatoptions=croq          " (fo) influences how vim automatically formats text
set backspace=indent,eol,start  " (bs) allows backspacing beyond starting point of insert mode, indents and line breaks
"set nrformats+=alpha            " (nf) adds alpha chars to list that gets incremented/decremented with ^A/^X
"set listchars+=tab:>-           " (lcs) strings used in 'list' mode to show hidden characters (default=eol:$)
"set listchars+=trail:-
set winminheight=0              " (wmh) the minimal height of the window when it's not the current window

"set nowrap                     " allows text to continue off the window (need horizontal scrolling)
set tw=79
set linebreak                   " (lbr) wrap long lines at a space instead of in the middle of a word
set sidescroll=5                " (ss) the minimal number of columns to scroll horizontally
set listchars+=precedes:<       " (lcs) when 'nowrap', character to indicate that line continues off the page
set listchars+=extends:>

set wrapscan                    " (ws) allows search to wrap to top of document when the bottom has been hit
set incsearch                   " (is) highlights what you are searching for as you type
set hlsearch                    " (hls) highlights all instances of the last searched string
set ignorecase                  " (ic) ignores case in search patterns
set smartcase                   " (scs) don't ignore case when the search pattern has uppercase
set infercase                   " (inf) during keyword completion, fix case of new word (when ignore case is on)

set foldcolumn=6                " (fdc) width of fold column (to see where folds are)
set foldmethod=indent           " (fdm) creates a fold for every level of indentation
set foldlevel=99                " (fdl) when file is opened, don't close any folds
set foldenable                  " (fen) enables or disables folding. 'za' to open/close

set autowrite                   " Write the old file out when switching between files
"set guifont=Inconsolata:h12:cANSI   " set font type and size. depends on resolution
set guifont=Liberation\ Mono:h12  " set font type and size. depends on resolution
set antialias
set visualbell
set noerrorbells

let g:ycm_collect_identifiers_from_tag_Files = 1  " YCM collects identifiers from exuberant ctags
let g:ycm_add_preview_to_completeopt = 1  " preview window stores detailed info
let g:ycm_autoclose_preview_window_after_completion = 1


" have j,k move by row instead of by line
nmap j gj
nmap k gk

" Backups  
set backupdir=~/vimtmp
set directory=~/vimtmp
set backup

let html_use_css = 1            " the ':%TOhtml' command generates html without <font> tags
let mapleader = ","             " Change map leader from \

"au FocusLost * :wa        " Saves file when Vim window loses focus

" ignore files
set wildignore+=*.pyc,*.swp,*.zip,*.tif,*.tiff,*.jpg,*.tmp,*.temp
set wildignore+=*\\tmp\\*,*\\Lib\\*,*\\build\\*,*\\Include\\*,*\\Scripts\\*,*\\proj_static\\*

" don't adjust working dir automatically
set noautochdir

" minibufexpl settings
"let g:miniBufExplMapWindowNavVim = 1 
"let g:miniBufExplMapWindowNavArrows = 1 
"let g:miniBufExplMapCTabSwitchBufs = 1 
"let g:miniBufExplModSelTarget = 1 


" File Specific Settings
" ------------------------------------------------------------

au FileType xhtml,html,htm,php,xml,js setlocal ts=2 sw=2 sts=2  " (sts) makes spaces feel like tabs (like deleting)
au FileType *.md setlocal ts=4 sw=4 sts=4 et
                                                            
au FileType js setlocal smartindent                         " enable smartindenting (si) feature for the following files
au FileType js setlocal cindent

let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

au FileType txt setlocal fo+=tn

au FileType python setl sw=4 sts=4 et                       " indents for each filetype
au FileType python set omnifunc=pythoncomplete#Complete     " context-sensitive code completion 
let g:SuperTabDefaultCompletionType = "context"

set completeopt=menuone,longest,preview                     "pydoc with completion

" remove trailing whitespace from lines when saving file
autocmd BufWritePre *.py normal m`:%s/\s\+$//e''


" before writing to any file, this function call will remove any extra white space at the end of a line
"au! BufWrite,FileWritePre * call RemoveWhiteSpace()


" SYNTASTIC
let g:syntastic_enable_signs=1
let g:syntastic_auto_jump=1
let g:syntastic_javascript_checkers=['jshint']
let g:syntastic_python_checkers=['flake8']
let g:syntastic_check_on_open=1
let g:syntastic_enable_balloons = 1


" Abbreviations
" ------------------------------------------------------------

"abbreviate #i #include
"abbreviate #d #define

"abbreviate <a <a href=""></a><left><left><left><left><left>
"abbreviate <i <img src="" /><left><left><left>
abbreviate l" &ldquo;&rdquo;<left><left><left><left><left><left>
abbreviate r" &rdquo;
abbreviate l' &lsquo;
abbreviate r' &rsquo;
"abbreviate  &quot;&quot;<left><left><left><left><left>


" Key Mappings
" ------------------------------------------------------------

" allows moving between split windows much faster and more intuitive
map <C-J> <C-W>j<C-W>_
map <C-K> <C-W>k<C-W>_

" show generated ctag list in any mode
map <leader>t :TagbarToggle<CR>

" easymotion
let g:EasyMotion_leader_key = '<Space>'

map <leader>1 :CtrlP<CR>
map <leader>2 :CtrlPBuffer<CR>
map <leader>3 :CtrlPClearCache<CR>
" set cwd to dir of current file
map <leader>4 :cd %:p:h<CR>

map <leader><S-f> :set ft=html<CR>

let g:ctrlp_working_path_mode = 0

" activate rainbow parens
map <leader><S-r> :RainbowParenthesesToggle<CR>
au Syntax * RainbowParenthesesLoadSquare   " []
au Syntax * RainbowParenthesesLoadBraces   " {}
au Syntax * RainbowParenthesesLoadChevrons " <>
syntax on

" snipMate - change trigger from tab since YCM uses tab
":let g:snips_trigger_key = '<leader><Tab>'
":let g:snips_trigger_key_backwards = '<leader><S-Tab>'
"imap <leader><Tab> <Plug>snipMateNextOrTrigger
"smap <leader><Tab> <Plug>snipMateNextOrTrigger
let g:UltiSnipsExpandTrigger="<c-f>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-g>"


" <F2> applies a rot13 dmca-grade encryption scheme to your file
"map <F2> mzggg?G`z      "(seems to be faster than mzggVGg?`z)

" <F3> appends the current date and time after the cursor
"map  <F3> a<C-R>=strftime("%c")<CR><Esc>
"imap <F3>  <C-R>=strftime("%c")<CR>

" <F9> toggles word wrap
map  <F9> :set wrap!<CR>
imap <F9> <ESC>:set wrap!<CR>a

" <F8> toggles whether the last searched string is highlighted
map  <F8> :set hls!<CR>
imap <F8> <ESC>:set hls!<CR>a

" Shortcut to fold tags with leader + ft
nmap <leader>ft Vatzf

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Use Q for formatting current paragraph or selection
vmap Q gq
nmap Q gqap

" make : command easier to type!
nmap ; :

" for moving around open windows
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" 'td' to show task list: TODO, FIXME. 'q' to close it
map <leader>td <Plug>TaskList

" jumps to pep8 errors in quickfix window
let g:pep8_map='<leader>8'
" Rope module. GtD jumps to module's def, e.g. Django models.Model
" Rename refactors
map <leader>j :RopeGotoDefinition<CR>
map <leader>r :RopeRename<CR>

" You can fuzzy text search for anything in your code (variable name,
" class, method, etc) and it'll give you a list of files and line numbers 
" where they are defined so you can quickly cycle through them
nmap <leader>a <Esc>:Ack!

" Change line-numbering based on mode
set rnu
au InsertEnter * :set nu
au InsertLeave * :set rnu
au FocusLost * :set nu
au FocusGained * :set rnu

" Highlight lines greater than 79 chars in length
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/

" Add visual vertical column at line 80
set colorcolumn=80
highlight ColorColumn ctermbg=DarkGray guibg=DarkGray

" Source the vimrc file after saving it. This way, you don't have to reload Vim
" to see the changes.  
if has("autocmd")  
 augroup myvimrchooks  
  au!  
  autocmd bufwritepost .vimrc source ~/.vimrc  
 augroup END  
endif

" Add the virtualenv's site-packages to vim path
" py << EOF
" import os.path
" import sys
" import vim
" if 'VIRTUAL_ENV' in os.environ:
"     project_base_dir = os.environ['VIRTUAL_ENV']
"     sys.path.insert(0, project_base_dir)
"     activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"     execfile(activate_this, dict(__file__=activate_this))
" EOF


